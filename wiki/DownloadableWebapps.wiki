#summary How to create downloadable webapps

= Creating Downloadable WebApps =

Making a webapp that is dynamically downloadable by i-jetty is very much like making a normal webapp. The only tricky step is that you need to run the `dx` tool over the classes that would normally be in `WEB-INF/classes` and the jars that would normally be in `WEB-INF/lib`.

== Downloading a WebApp ==
*NOTE: Android SDK 1.5 and above is needed to support dynamic webapps.


== Sample WebApps ==

The i-jetty project comes with a couple of example webapps that you can build, and then dynamically download with i-jetty to get you going with the concept of dynamic webapps in the android environment.


=== Hello World Example ===

The "HelloWorld" web application in `$I_JETTY_HOME/modules/hello` prints out the famous "Hello World" message. The web app contains one very simple Servlet as an example of how to prepare a web app that has classes in addition to static content.

The pom.xml for HelloWorld does a couple of things to make the webapp android-ifiable (if I can invent that word):

 * runs the `dx` tool over all the java classes in the webapp to produce a `classes.dex` file
 * zips up the `classes.dex` output file from `dx`

That's all you need to do for a simple webapp that uses no libraries. For more complex webapps that use 3rd party libs, refer to the "Chat" webapp.

=== Chat Example ===

The "Chat" web application is a much more sophisticated beast than "HelloWorld". It uses 3rd party java libraries, such as the [http://jetty.mortbay.org Jetty] implementation of the [http://docs.codehaus.org/display/JETTY/Cometd+(aka+Bayeux) cometd Bayeux protocol], along with the [http://cometdproject.dojotoolkit.org/documentation/cometd-dojox dojox.cometd] javascript library to implement the now-classic Ajax chat room. 

Again, this is essentially a straight-forward webapp, with the only added complication that the 3rd party jars need to be dex-ified. Looking at the pom.xml for the Chat application, you'll see that prior to the 2 steps outlined above in the HelloWorld app, the build first unpacks the classes from the dependency jars. Thus, during the `dx` step, all classes - both those of the webapp and those from the libraries it uses - are all compiled into the `classes.dex` and then `classes.zip` file.
